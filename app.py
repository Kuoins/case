import os
import logging
from flask import Flask
import telebot
from telebot import types
from dotenv import load_dotenv
import threading
import time

load_dotenv()

BOT_TOKEN = os.environ.get("BOT_TOKEN")
MINI_APP_URL = os.environ.get("MINI_APP_URL", "https://vasiliy-katsyka.github.io/case")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# --- Flask –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
app = Flask(__name__) # Flask app instance

# --- Telegram –ë–æ—Ç ---
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
if not BOT_TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ (BOT_TOKEN) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    # –ú–æ–∂–Ω–æ –∑–¥–µ—Å—å –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É, 
    # —Ç–∞–∫ –∫–∞–∫ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç.
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã–π–¥–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç.
    # –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Gunicorn —ç—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—à–∏–±–∫–µ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞.
    if __name__ == '__main__':
        exit("BOT_TOKEN is not set. Exiting.")
    else: # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è Gunicorn'–æ–º
        raise RuntimeError("BOT_TOKEN is not set. Cannot initialize bot.")

bot = telebot.TeleBot(BOT_TOKEN)

@app.route('/')
def index():
    # –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã Render —Å—á–∏—Ç–∞–ª —Å–µ—Ä–≤–∏—Å "–∑–¥–æ—Ä–æ–≤—ã–º"
    return "Flask App for Bot (Bot is polling) is running!"

# --- API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã –ø–æ–∑–∂–µ) ---
# @app.route('/api/init_payment', methods=['POST'])
# async def init_payment():
#     # ...
#     return {"status": "ok"}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç chat_id: {message.chat.id} ({message.from_user.username})")
    markup = types.InlineKeyboardMarkup()
    if not MINI_APP_URL:
        logger.error("MINI_APP_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: Mini App URL –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        web_app_info = types.WebAppInfo(url=MINI_APP_URL)
        app_button = types.InlineKeyboardButton(text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –ò–≥—Ä—É-–†—É–ª–µ—Ç–∫—É", web_app=web_app_info)
        markup.add(app_button)
        bot.send_message(
            message.chat.id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TON Gift Universe! üéÅ\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä—É–ª–µ—Ç–∫—É –∏ –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É!",
            reply_markup=markup
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ /start ({message.chat.id}): {e}")
        try:
            bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}: {e2}")


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.chat.id}: {message.text}")
    bot.reply_to(message, "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É.")

# –§–ª–∞–≥, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ polling –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
bot_polling_started = False
bot_polling_thread = None

def run_bot_polling():
    global bot_polling_started
    if bot_polling_started:
        logger.info("Polling —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    bot_polling_started = True
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
    
    max_retries_remove_webhook = 3
    for i in range(max_retries_remove_webhook):
        try:
            bot.remove_webhook()
            logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω (–µ—Å–ª–∏ –±—ã–ª).")
            break
        except Exception as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {i+1}/{max_retries_remove_webhook} —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if i < max_retries_remove_webhook - 1:
                time.sleep(2)
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. Polling –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –∑–∞–ø—É—Å–∫–∞ polling, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
    
    while True: # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ polling –≤ —Å–ª—É—á–∞–µ —Å–±–æ—è
        try:
            logger.info("–°—Ç–∞—Ä—Ç infinity_polling...")
            bot.infinity_polling(logger_level=logging.INFO, skip_pending=True, timeout=60, long_polling_timeout=30) # –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∞–π–º–∞—É—Ç—ã
        except telebot.apihelper.ApiTelegramException as e:
            logger.error(f"–û—à–∏–±–∫–∞ API Telegram –≤ polling: {e}. –ö–æ–¥: {e.error_code}")
            if e.error_code == 401: # Unauthorized
                logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                bot_polling_started = False # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–∞—Ä—É–∂–∏, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å–ø—Ä–∞–≤—è—Ç
                break # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ while True, —Ç.–∫. —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
            elif e.error_code == 409: # Conflict: another webhook is set
                logger.error("–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –¥–ª—è –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥—Ä—É–≥–æ–π –≤–µ–±—Ö—É–∫. Polling –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
                bot_polling_started = False
                break
            else:
                logger.error(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ API Telegram, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
                time.sleep(30)
        except ConnectionError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ polling: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ polling –±–æ—Ç–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)
        else: # –ï—Å–ª–∏ infinity_polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
            logger.warning("infinity_polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —à—Ç–∞—Ç–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)
        
        if not bot_polling_started: # –ï—Å–ª–∏ —Ñ–ª–∞–≥ —Å–±—Ä–æ—à–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ 401), –≤—ã—Ö–æ–¥–∏–º
            break
            
# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å –±–æ—Ç–æ–º –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
# –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã Gunicorn –µ–≥–æ –ø–æ–¥—Ö–≤–∞—Ç–∏–ª
if BOT_TOKEN and not bot_polling_started and os.environ.get("WERKZEUG_RUN_MAIN") != "true":
    # WERKZEUG_RUN_MAIN - —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä—É—é Flask dev server —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ,
    # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ use_reloader=True (—Ö–æ—Ç—è –º—ã –µ–≥–æ –≤—ã–∫–ª—é—á–∏–ª–∏)
    bot_polling_thread = threading.Thread(target=run_bot_polling)
    bot_polling_thread.daemon = True
    bot_polling_thread.start()
    logger.info("–ü–æ—Ç–æ–∫ –¥–ª—è polling –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è.")


if __name__ == '__main__':
    # –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–µ–ø–µ—Ä—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Flask dev server.
    # –ü–æ—Ç–æ–∫ —Å –±–æ—Ç–æ–º —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –∫–æ–¥–æ–º –≤—ã—à–µ.
    logger.info("–ó–∞–ø—É—Å–∫ Flask development server (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞)...")
    # Flask dev server –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ—Ç–æ–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —Å–∞–º –Ω–µ –ø–æ—Ä–æ–¥–∏–ª –ø—Ä–∏ use_reloader=True.
    # –ü–æ—ç—Ç–æ–º—É use_reloader=False –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ.
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)), debug=False, use_reloader=False)
