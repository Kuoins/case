import os
import logging
from flask import Flask # request —É–±—Ä–∞–Ω, —Ç.–∫. –≤–µ–±—Ö—É–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
import telebot
from telebot import types
from dotenv import load_dotenv
import threading # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
import time

load_dotenv()

BOT_TOKEN = os.environ.get("BOT_TOKEN")
MINI_APP_URL = os.environ.get("MINI_APP_URL", "https://vasiliy-katsyka.github.io/case")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__) # Flask –≤—Å–µ –µ—â–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å API –¥–ª—è Mini App
bot = telebot.TeleBot(BOT_TOKEN)

@app.route('/') # –û—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ Flask —Ä–∞–±–æ—Ç–∞–µ—Ç
def index():
    return "Flask App for Bot (Bot is polling) is running!"

# --- API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è Mini App (–µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã) ---
# @app.route('/api/some_endpoint', methods=['POST'])
# def handle_api_request():
#     # –¢–≤–æ—è –ª–æ–≥–∏–∫–∞ API
#     return {"status": "success"}
# --------------------------------------------------

@bot.message_handler(commands=['start'])
def send_welcome(message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç chat_id: {message.chat.id}")
    markup = types.InlineKeyboardMarkup()
    try:
        web_app_info = types.WebAppInfo(url=MINI_APP_URL)
        app_button = types.InlineKeyboardButton(text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –ò–≥—Ä—É-–†—É–ª–µ—Ç–∫—É", web_app=web_app_info)
        markup.add(app_button)
        bot.send_message(
            message.chat.id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TON Gift Universe! üéÅ\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä—É–ª–µ—Ç–∫—É –∏ –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É!",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ /start: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É.")

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É.")

def run_bot_polling():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
    # –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–µ–±—Ö—É–∫ —Å–Ω—è—Ç
    max_retries = 3
    for i in range(max_retries):
        try:
            bot.remove_webhook()
            logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω (–µ—Å–ª–∏ –±—ã–ª).")
            break
        except Exception as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {i+1}/{max_retries} —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if i < max_retries - 1:
                time.sleep(2) # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. Polling –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
                return # –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º polling, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ —Å–Ω—è—Ç

    try:
        bot.infinity_polling(logger_level=logging.INFO, skip_pending=True)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ polling –±–æ—Ç–∞: {e}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        time.sleep(15) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        run_bot_polling() # –û—Å—Ç–æ—Ä–æ–∂–Ω–æ: —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤, –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–æ–±–ª–µ–º–∞–º –±–µ–∑ –¥–æ–ø. –∫–æ–Ω—Ç—Ä–æ–ª—è

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã Flask –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å
    bot_thread = threading.Thread(target=run_bot_polling)
    bot_thread.daemon = True # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π
    bot_thread.start()

    # –ó–∞–ø—É—Å–∫ Flask development server
    # –ù–∞ Render gunicorn –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å app, –∏ —ç—Ç–æ—Ç –±–ª–æ–∫ __main__ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é —Ç–∞–∫.
    # –ù–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ `python app.py` —ç—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.
    logger.info("–ó–∞–ø—É—Å–∫ Flask development server...")
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)), debug=False, use_reloader=False)
    # debug=False –∏ use_reloader=False –≤–∞–∂–Ω—ã, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ—Ç–æ–∫ —Å –±–æ—Ç–æ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫–æ–¥–∞.
